"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var parser_1 = __importDefault(require("./common/parser"));
var bent_1 = __importDefault(require("bent"));
var request = bent_1.default("string");
var url = "https://www.youtube.com/";
var searchType = {
    video: "EgIQAQ%3D%3D",
    playlist: "EgIQAw%3D%253D",
    channel: "EgIQAg%3D%253D"
};
exports.scrapeYt = {
    /**
     * Search youtube for a list of  based on a search query.
     * @param query Search Query
     * @param options (optional) Option for search type and limit
     */
    search: function (query, options) {
        if (options === void 0) { options = {}; }
        return new Promise(function (resolve, reject) {
            if (options === undefined)
                options = {};
            options = __assign({ type: "video", limit: 10, page: 1 }, options);
            var searchUrl = url + "results?";
            if (query.trim().length === 0)
                return reject(new Error("Query cannot be blank"));
            if (options.type && searchType[options.type])
                searchUrl += "sp=" + searchType[options.type] + "&";
            else
                searchUrl += "sp=" + searchType["video"] + "&"; //Default type will be video
            searchUrl += "page=" + options.page + "&search_query=" + query;
            request(searchUrl).then(function (html) {
                resolve(parser_1.default.parseSearch(html, options));
            }).catch(function (err) {
                reject(err);
            });
        });
    },
    /**
     * Search youtube for playlist information.
     * @param playlistId Id of the playlist
     */
    getPlaylist: function (playlistId) {
        return new Promise(function (resolve, reject) {
            if (playlistId.trim().length === 0)
                return reject(new Error("Playlist ID cannot be blank"));
            var playlistUrl = url + "playlist?list=" + playlistId;
            request(playlistUrl).then(function (html) {
                resolve(parser_1.default.parseGetPlaylist(html));
            }).catch(function (err) {
                reject(err);
            });
        });
    },
    /**
     * Search youtube for video information.
     * @param videoId Id of the video
     */
    getVideo: function (videoId) {
        return new Promise(function (resolve, reject) {
            if (videoId.trim().length === 0)
                return reject(new Error("Video ID cannot be blank"));
            var videoUrl = url + "watch?v=" + videoId;
            request(videoUrl).then(function (html) {
                resolve(parser_1.default.parseGetVideo(html));
            }).catch(function (err) {
                reject(err);
            });
        });
    },
    /**
     * Search youtube for related videos based on videoId .
     * @param videoId Id of the video
     * @param limit (optional) Max videos count
     */
    getRelated: function (videoId, limit) {
        if (limit === void 0) { limit = 10; }
        return new Promise(function (resolve, reject) {
            if (videoId.trim().length === 0)
                return reject(new Error("Video ID cannot be blank"));
            var videoUrl = url + "watch?v=" + videoId;
            request(videoUrl).then(function (html) {
                resolve(parser_1.default.parseGetRelated(html, limit));
            }).catch(function (err) {
                reject(err);
            });
        });
    },
    /**
     * Search youtube for up next video based on videoId.
     * @param videoId Id of the video
     */
    getUpNext: function (videoId) {
        return new Promise(function (resolve, reject) {
            if (videoId.trim().length === 0)
                return reject(new Error("Video ID cannot be blank"));
            var videoUrl = url + "watch?v=" + videoId;
            request(videoUrl).then(function (html) {
                resolve(parser_1.default.parseGetUpNext(html));
            }).catch(function (err) {
                reject(err);
            });
        });
    }
};
